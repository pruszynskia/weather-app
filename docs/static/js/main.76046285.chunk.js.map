{"version":3,"sources":["styles/common.ts","apis/apisConfig.tsx","components/WeatherCard.tsx","components/WeatherCardDetails.tsx","components/Weather.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["weatherStyles","makeStyles","root","display","flexDirection","justifyContent","background","minHeight","container","flexWrap","margin","container__card","color","maxWidth","column","row","cardImg","height","width","glassMorphism","boxShadow","backdropFilter","webkitBackdropFilter","borderRadius","border","API_KEY","WeatherCard","props","styles","arr","className","data","length","Card","onClick","CardMedia","component","src","icon","find","el","hour","Date","dt","getHours","weather","getIcon","CardContent","day","toUpperCase","Math","floor","max","map","main","temp_max","now","toLocaleDateString","getDateString","getWeatherName","WeatherCardDetails","description","Weather","useState","city","setCity","weatherData","setWeatherData","newWeatherData","setNewWeatherData","loading","setLoading","loading2","setLoading2","selectedDay","setSelectedDay","getWeatherData","a","url","axios","get","list","getData","e","preventDefault","days","newDates","monday","tuesday","wednesday","thursday","friday","saturday","sunday","forEach","w","d","getDay","toLowerCase","push","getByDay","onSubmit","TextField","label","variant","onChange","target","value","Button","type","Object","entries","id","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAEaA,EAAgBC,aAAW,iBAAO,CAC3CC,KAAM,CACFC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,oEACZC,UAAW,SAEfC,UAAW,CACPL,QAAS,OACTM,SAAU,OACVJ,eAAgB,SAChBK,OAAQ,QAEZC,gBAAiB,CACbC,MAAO,QACPT,QAAS,OACTM,SAAU,OACVJ,eAAgB,SAChBK,OAAQ,OACRG,SAAU,SAEdC,OAAQ,CACJV,cAAe,UAEnBW,IAAK,CACDX,cAAe,OAEnBY,QAAS,CACLC,OAAQ,QACRC,MAAO,SAEXC,cAAe,CACXb,WAAY,6BACZc,UAAW,yCACXC,eAAgB,cAChBC,qBAAsB,cACtBC,aAAc,OACdC,OAAQ,6C,SCxCHC,EAAU,CAAC,oC,0CCgHTC,EAtGK,SAACC,GACjB,IAAMC,EAAS5B,IA8Cf,IA5CoB6B,EAgDpB,OACI,qBACIC,UAAS,wBACPF,EAAOpB,UADA,yBAEPoB,EAAOd,OAFA,kBADb,SAOIa,EAAMI,KAAKC,OACP,eAACC,EAAA,EAAD,CACIH,UAAS,gCACPF,EAAOT,cADA,0BAGTe,QAjBI,aAaR,UAMI,cAACC,EAAA,EAAD,CACIL,UAAS,oCACPF,EAAOjB,gBADA,qCAEPiB,EAAOZ,QAFA,8BAIToB,UAAU,MACVC,IAAG,2CA9DvB,SAAiBR,GACb,GAAIA,EAAIG,OAAS,EAAG,CAChB,GAAGH,EAAIG,QAAU,EAAG,CAChB,IAAMM,EAAOT,EAAIU,MAAK,SAACC,GACnB,IAAMC,EAAO,IAAIC,KAAc,KAAP,OAAFF,QAAE,IAAFA,OAAA,EAAAA,EAAIG,KAAWC,WACrC,OAAgB,KAATH,GAAwB,KAATA,GAAwB,KAATA,KAEzC,cAAOH,QAAP,IAAOA,OAAP,EAAOA,EAAMO,QAAQ,GAAGP,KACpB,IAAD,EACH,iBAAOT,EAAI,GAAGgB,eAAd,aAAO,EAAiB,GAAGP,KAG/B,MAAO,gBAkD8CQ,CAAQnB,EAAMI,MAApD,aAEP,eAACgB,EAAA,EAAD,CACIjB,UAAS,oCACPF,EAAOjB,gBADA,qCAEPiB,EAAOd,OAFA,8BADb,UAMI,6BAAKa,EAAMqB,IAAIC,gBAEf,mCAEQ,gCACI,8BAAK,gCAlFjBpB,EAkFiCF,EAAMI,KAjFpDF,EAAIG,OAAS,EACLkB,KAAKC,MAAMD,KAAKE,IAAL,MAAAF,KAAI,YAAQrB,EAAIwB,KAAI,SAACb,GAAD,aAAsB,UAAAA,EAAGc,YAAH,eAASC,WAAY,QAE1E,iBA8EsB,cACL,8BA3DhC,SAAuBxB,GAAuB,IAAD,IACzC,iBAAO,IAAIW,MAAK,UAAAX,EAAKQ,MAAK,SAACC,GAAD,aAAqE,MAA/C,cAAIE,MAAO,OAAFF,QAAE,IAAFA,OAAA,EAAAA,EAAIG,KAAMD,KAAKc,cAAxB,eAAgCZ,sBAAhE,eAAoFD,KAAMD,KAAKc,cAA/G,aAAO,EAAiHC,qBA2DxFC,CAAc/B,EAAMI,QAExB,8BA1DhC,SAAwBF,GAEK,IAAD,EADxB,OAAIA,EAAIG,OACDH,EAAIG,QAAU,GACI,UAAGH,EAAIU,MAAK,SAACC,GAC1B,IAAMC,EAAO,IAAIC,KAAc,KAAP,OAAFF,QAAE,IAAFA,OAAA,EAAAA,EAAIG,KAAWC,WACrC,OAAgB,KAATH,GAAwB,KAATA,GAAwB,KAATA,YAFxB,aAAG,EAGhBI,QAAQ,GAAGS,OACO,GAEfzB,EAAI,GAAGgB,QAAQ,GAAGS,KAGtB,gBA8CuBK,CAAehC,EAAMI,MAAMkB,2BAOrD,QCvEDW,EA1BY,SAACjC,GAAsB,IAAD,YACvCC,EAAS5B,IACf,OACI,qBAAK8B,UAAS,wBACRF,EAAOpB,UADC,yBAERoB,EAAOd,OAFC,kBAAd,SAKI,cAACmB,EAAA,EAAD,CACIH,UAAS,4BACPF,EAAOjB,gBADA,6BAEPiB,EAAOb,IAFA,6BAGPa,EAAOT,cAHA,sBADb,SAOI,eAAC4B,EAAA,EAAD,WACI,sCAAIpB,EAAMkB,eAAV,aAAI,EAAeF,KACnB,8BAAIO,KAAKC,OAAM,UAAAxB,EAAMkB,eAAN,mBAAeS,YAAf,eAAqBC,WAAY,IAAM,EAAtD,YACA,6BAAI,UAAA5B,EAAMkB,eAAN,mBAAeA,eAAf,mBAAyB,UAAzB,eAA6BgB,cAAe,aCyHrDC,EAhIC,WACZ,IAAMlC,EAAS5B,IADG,EAGM+D,mBAAS,IAHf,mBAGXC,EAHW,KAGLC,EAHK,OAIoBF,mBAAgC,MAJpD,mBAIXG,EAJW,KAIEC,EAJF,OAM0BJ,mBAAqB,MAN/C,mBAMXK,EANW,KAMKC,EANL,OAOYN,oBAAkB,GAP9B,mBAOXO,EAPW,KAOFC,EAPE,OAQcR,oBAAkB,GARhC,mBAQXS,EARW,KAQDC,EARC,OAUoBV,mBAAS,MAV7B,mBAUXW,EAVW,KAUEC,EAVF,KAYZC,EAAc,uCAAG,WAAOZ,GAAP,iBAAAa,EAAA,6DACbC,EADa,UH/BC,iCG+BD,gCACiCd,EADjC,yBACsDvC,EADtD,oCAEAsD,IAAMC,IAAIF,GAFV,cAEb/C,EAFa,yBAGZA,EAAKA,KAAKkD,MAHE,2CAAH,sDAMdC,EAAO,uCAAG,WAAOC,GAAP,eAAAN,EAAA,6DACZM,EAAEC,iBADU,SAIJb,GAAW,GAJP,SAKeK,EAAeZ,GAL9B,OAKEjC,EALF,OAMJoC,EAAepC,GACfwC,GAAW,GAPP,kDASJA,GAAW,GATP,0DAAH,sDAcHc,EAAe,CACjB,SACA,SACA,UACA,YACA,WACA,SACA,YA4BJnB,GAAeM,IAEfH,EA1BJ,SAAkBxC,GACd,IAAIyD,EAA4B,CAC5BC,OAAQ,GACRC,QAAS,GACTC,UAAW,GACXC,SAAU,GACVC,OAAQ,GACRC,SAAU,GACVC,OAAQ,IAEZ,OAAIhE,EAAIG,QAGRH,EAAIiE,SAAQ,SAACC,GACT,IAAIC,EAAI,IAAItD,KAAU,IAALqD,EAAEpD,IACfK,EAAYqC,EAAKW,EAAEC,UAAUC,cAEjCZ,EAAStC,GAAKmD,KAAKJ,MAEhBT,GARIA,EAcDc,CAASlC,IAEnBO,GAAY,IAGhB,OAAGH,EACQ,6CAIP,sBAAKxC,UAAWF,EAAO1B,KAAvB,UAEI,uBAAM4B,UAAS,4BACTF,EAAOpB,UADE,6BAEToB,EAAOb,IAFE,sBAIXsF,SAAQ,uCAAE,WAAOlB,GAAP,SAAAN,EAAA,sEACAK,EAAQC,GADR,OAENV,GAAY,GAFN,2CAAF,sDAJZ,UASI,cAAC6B,EAAA,EAAD,CAEIC,MAAM,SACNC,QAAQ,WACRC,SAAU,SAACtB,GAEPlB,EAAQkB,EAAEuB,OAAOC,QAErBA,MAAO3C,IAEX,cAAC4C,EAAA,EAAD,CAAQJ,QAAQ,YAAYK,KAAK,SAAjC,uBAIHzC,EAED,qBAAKtC,UAAS,gCACJF,EAAOpB,UADH,iCAEJoB,EAAOd,OAFH,0BAAd,SAKI,qBAAKgB,UAAS,gCACRF,EAAOpB,UADC,iCAERoB,EAAOb,IAFC,0BAAd,SAMQ2D,EAAc,cAAC,EAAD,CAAoB7B,QAASuB,EAAeM,GAAe,IAAI,KAC7EoC,OAAOC,QAAQ3C,GAAgBf,KAAI,SAACb,EAAUwE,GAC1C,OAAO,cAAC,EAAD,CAAsBjF,KAAMS,EAAG,GAAIQ,IAAKR,EAAG,GAAKN,QAAS,kBAAMyC,EAAenC,EAAG,MAA/DwE,UAKvC,4B,gBC7HCC,MAbf,WAEE,OACE,cAAC,IAAD,UACE,qBAAKnF,UAAU,MAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOoF,OAAK,EAACC,KAAK,IAAI/E,UAAW0B,WCC5BsD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.76046285.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core';\n\nexport const weatherStyles = makeStyles(() => ({\n    root: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        background: \"linear-gradient(0deg, rgba(9,9,121,1) 0%, rgba(0,212,255,1) 100%)\",\n        minHeight: \"100vh\"\n    },\n    container: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\",\n        margin: \"20px\",\n    },\n    container__card: {\n        color: \"white\",\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\",\n        margin: \"20px\",\n        maxWidth: \"300px\"\n    },\n    column: {\n        flexDirection: \"column\"\n    },\n    row: {\n        flexDirection: \"row\"\n    },\n    cardImg: {\n        height: \"200px\",\n        width: \"200px\"\n    },\n    glassMorphism: {\n        background: \"rgba( 255, 255, 255, 0.4 )\",\n        boxShadow: \"0 8px 32px 0 rgba( 31, 38, 135, 0.37 )\",\n        backdropFilter: \"blur( 4px )\",\n        webkitBackdropFilter: \"blur( 4px )\",\n        borderRadius: \"10px\",\n        border: \"1px solid rgba( 255, 255, 255, 0.18 )\"\n    }\n}));","export const API_KEY = ['a4414628b86345a24b4a4a36a1ceddb2'];\nexport const API_BASE_URL = 'https://api.openweathermap.org';\n\n","import { Card, CardMedia, CardContent } from '@material-ui/core'\nimport { weatherStyles } from '../styles/common'\nimport { IWeatherData, } from '../lib/types';\n\ninterface WeatherCardProps {\n    data: IWeatherData[],\n    day: string\n    onClick: () => void\n}\n\nconst WeatherCard = (props: WeatherCardProps) => {\n    const styles = weatherStyles();\n\n    function getMaxTemp(arr: IWeatherData[]) {\n        if(arr.length > 0) {\n            return Math.floor(Math.max(...arr.map((el: IWeatherData) => el.main?.temp_max || 0)))\n        } else {\n            return 'not available'\n        }\n    }\n    function getIcon(arr: IWeatherData[]) {\n        if (arr.length > 0) {\n            if(arr.length >= 5) {\n                const icon = arr.find((el: IWeatherData) => {\n                    const hour = new Date(el?.dt * 1000).getHours()\n                    return hour === 11 || hour === 12 || hour === 13\n                });\n                return icon?.weather[0].icon\n            } else {\n                return arr[0].weather?.[0].icon\n            }\n        } else {\n            return \"not available\"\n        }\n    }\n\n\n    function getDateString(data: IWeatherData[]) {\n        return new Date(data.find((el: IWeatherData) => new Date(el?.dt || Date.now())?.getHours() === 18)?.dt || Date.now() )?.toLocaleDateString()\n    }\n\n    function getWeatherName(arr: IWeatherData[]) {\n        if (arr.length) {\n            if(arr.length >= 5) {\n                const weatherName = arr.find((el: IWeatherData) => {\n                    const hour = new Date(el?.dt * 1000).getHours()\n                    return hour === 11 || hour === 12 || hour === 13\n                })?.weather[0].main\n                return weatherName || \"\"\n            } else {\n                return arr[0].weather[0].main\n            }\n        } else {\n            return \"not available\"\n        }\n    }\n\n    const handleClick = () => {\n\n    }\n    \n    return (\n        <div \n            className={`\n            ${styles.container}\n            ${styles.column}\n            `}\n        >\n            {\n            props.data.length ? (\n                <Card\n                    className={`\n                    ${styles.glassMorphism}\n                    `}\n                    onClick={handleClick}\n                >\n                    <CardMedia\n                        className={`\n                        ${styles.container__card}\n                        ${styles.cardImg}\n                        `}\n                        component=\"img\"\n                        src={`http://openweathermap.org/img/wn/${getIcon(props.data)}@2x.png`}\n                        />\n                    <CardContent\n                        className={`\n                        ${styles.container__card}\n                        ${styles.column}\n                        `}\n                        >\n                        <h2>{props.day.toUpperCase()}</h2>\n                \n                        <>\n                            {\n                                <div>\n                                    <div><h1>{getMaxTemp(props.data)} &deg;C</h1></div>\n                                    <div>{\n                                        getDateString(props.data)\n                                    }</div>\n                                    <div>{getWeatherName(props.data).toUpperCase()}</div>\n                                </div>\n                            }\n                            \n                        </>\n                    </CardContent>\n                </Card>\n            ) : null\n            }   \n        </div>\n    )\n}\n\nexport default WeatherCard;\n","import React from 'react';\nimport { weatherStyles } from '../styles/common';\nimport { Card, CardContent } from \"@material-ui/core\";\nimport { IWeatherData } from '../lib/types';\n\ninterface CardProps {\n    weather?: IWeatherData\n}\n\nconst WeatherCardDetails = (props: CardProps) => {\n    const styles = weatherStyles();\n    return (\n        <div className={`\n            ${styles.container}\n            ${styles.column}\n            `}\n        > \n            <Card \n                className={`\n                ${styles.container__card}\n                ${styles.row}\n                ${styles.glassMorphism}\n                `}\n            > \n                <CardContent>\n                    <p>{props.weather?.dt}</p>\n                    <p>{Math.floor(props.weather?.main?.temp_max || 0) || 0} &deg;C</p>\n                    <p>{props.weather?.weather?.[0]?.description || ''}</p>\n                </CardContent>\n            </Card>\n        </div>\n        \n    )\n};\n\nexport default WeatherCardDetails;","import React, { useState } from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button'\nimport { weatherStyles } from '../styles/common';\nimport {\n    TextField\n} from '@material-ui/core';\nimport { API_KEY , API_BASE_URL } from '../apis/apisConfig';\nimport WeatherCard from './WeatherCard';\nimport WeatherCardDetails from './WeatherCardDetails';\nimport { INewWeatherData, IWeatherData } from '../lib/types';\n\ntype IDay = \"monday\" | \n            \"tuesday\" |\n            \"wednesday\" |\n            \"thursday\" | \n            \"friday\" |\n            \"saturday\" | \n            \"sunday\"\n\nconst Weather = () => {\n    const styles = weatherStyles();\n\n    const [city, setCity] = useState('')\n    const [weatherData, setWeatherData] = useState<IWeatherData[] | null>(null);\n\n    const [newWeatherData, setNewWeatherData] = useState<any | null>(null)\n    const [loading, setLoading] = useState<boolean>(false);\n    const [loading2, setLoading2] = useState<boolean>(false)\n\n    const [selectedDay, setSelectedDay] = useState(null);\n\n    const getWeatherData = async (city: string) => {\n        const url = `${ API_BASE_URL}/data/2.5/forecast?q=${city}&cnt=40&appid=${API_KEY}&units=metric&mode=json`\n        const data = await axios.get(url)\n        return data.data.list\n    }\n\n    const getData = async (e: any) => {\n        e.preventDefault()\n\n            try{\n                setLoading(true)\n                const data = await getWeatherData(city);\n                setWeatherData(data);\n                setLoading(false);\n            } catch(error) {\n                setLoading(false)\n            }\n        \n    }\n\n        const days: IDay[] = [\n            \"sunday\",\n            \"monday\",\n            \"tuesday\",\n            \"wednesday\",\n            \"thursday\",\n            \"friday\",\n            \"saturday\"\n        ];\n\n    // Separate days\n    function getByDay(arr: IWeatherData[]): INewWeatherData {\n        let newDates: INewWeatherData = {\n            monday: [],\n            tuesday: [],\n            wednesday: [],\n            thursday: [],\n            friday: [],\n            saturday: [],\n            sunday: []\n        }\n        if(!arr.length) {\n            return newDates\n        }\n        arr.forEach((w: IWeatherData) =>  {\n            let d = new Date(w.dt*1000);\n            let day: IDay = days[d.getDay()].toLowerCase() as IDay;\n            // if(!newDates[day]) newDates[day] = []\n            newDates[day].push(w);\n        })\n        return newDates\n    }\n    // Max Temp\n\n\n    if (weatherData && loading2) {\n        let nWD = getByDay(weatherData)\n        setNewWeatherData(nWD)\n        setLoading2(false)\n    }\n\n    if(loading) {\n        return <div>Loading...</div>\n    }\n\n    return (\n        <div className={styles.root}>\n            {/* Search bar */} \n            <form className={`\n                ${styles.container}\n                ${styles.row}\n                `}\n                onSubmit={async (e: any) => {\n                    await getData(e);\n                    setLoading2(true);\n                }}\n            >\n                <TextField\n                    \n                    label=\"Search\"\n                    variant=\"standard\"\n                    onChange={(e) => {\n                        \n                        setCity(e.target.value);\n                    }}\n                    value={city}\n                />\n                <Button variant=\"contained\" type=\"submit\">Search</Button>\n            </form>\n\n            {/* Daily forecast */}\n            {newWeatherData ? \n            \n            <div className={`\n                    ${styles.container}\n                    ${styles.column}\n                    `}\n            >\n                <div className={`\n                    ${styles.container}\n                    ${styles.row}\n                    `}\n                >\n                    {\n                        selectedDay ? <WeatherCardDetails weather={newWeatherData[selectedDay || ''][0]} /> :\n                        Object.entries(newWeatherData).map((el: any,  id: number) => {\n                            return <WeatherCard key={id} data={el[1]} day={el[0]}  onClick={() => setSelectedDay(el[0])}/>\n                        }) \n                    }\n                </div>\n            </div>\n            : <div />}\n        </div>\n    )\n};\n\nexport default Weather;","import './App.css';\nimport Weather from './components/Weather';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  \n  return (\n    <Router>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path=\"/\" component={Weather} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}